{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1792739563799298049",
        "title": "\uD83D\uDD25用好 explain 妈妈再也不用担心我的 SQL 慢了",
        "description": "大家好，我是聪，一个乐于分享的小小程序员。今天的聪碰见了一个当面试官的朋友问我，用过 explain 吗？说说怎么分析的？ 聪：一脸正经的回答道\uD83D\uDCA1",
        "content": "大家好，我是聪，一个乐于分享的小小程序员。在不久之前我写了一个慢 SQL 分析工具，可以用来分析 Java Mybatis 项目的 SQL 执行情况，其中刚好涉及到了 explain 的使用。感兴趣的可以了解一下。\n\nGithub 地址⭐：https://github.com/lhccong/sql-slow-mirror\n\n掘金文章分享\uD83D\uDCD1：https://juejin.cn/post/7358398963840548915\n\n那么开始我们今天的主题吧，今天的聪碰见了一个当面试官的朋友问我，用过 explain 吗？说说怎么分析的？\n\n<img src=\"https://pic.code-nav.cn/post_picture/1612254411675926529/sh3htrqy-image-20240423094124100.png\" alt=\"Snipaste_2024-04-24_11-30-56.png\" width=\"30%\" /></br>\n\n聪：一脸正经的回答道\uD83D\uDCA1\n\n聪：你好面试官，我当然用过 explain，我平时都会那它去查看 SQL 语句是否还能优化。接下来我从主要属性跟实际例子来讲解：\n\n### 主要的属性\n\n#### 1） \uD83C\uDF31 id\n\n查询中每个 SELECT 子句的标识符。简单查询的 id 通常为 1，复杂查询（如包含子查询或 UNION）的 id 会有多个。\n\n#### 2） \uD83C\uDF31 select_type\n\n描述查询的类型。比如：简单查询显示为 `SIMPLE`，子查询显示为 `SUBQUERY`，UNION 中的第二个和后续查询显示为 `UNION`。\n\n#### 3）\uD83C\uDF31 table\n\n表名称这个就不用再详细解释了吧哈哈。\n\n#### 4） \uD83C\uDF31 partitions\n\n表示查询涉及到的分区。如果你有使用分区表的话才需要关注此字段。\n\n#### 5） \uD83C\uDF31 type（重点记忆⭐）\n\n表示访问的类型，这里也可以看出你的 SQL 的性能。可能的值从最好到最差包括：`system`、`const`、`eq_ref`、`ref`、`range`、`index`、`ALL`。其中 `ALL` 表示全表扫描，效率最低。\n\n-   system：\n\n    表示查询的表只有一行（系统表）。这是一个特殊的情况，不常见。\n\n-   const：\n\n    表示查询的表最多只有一行匹配结果。这通常发生在查询条件是**主键**或**唯一索引**，并且是常量比较，以下是一个使用主键查找的例子：\n\n    ```sql\n    EXPLAIN SELECT * FROM employees WHERE employee_id = 12345;\n    ```\n\n-   eq_ref：\n\n    表示对于每个来自前一张表的行，MySQL 仅访问一次这个表。这通常发生在连接查询中使用主键或唯一索引的情况下，例子如下：\n\n    ```sql\n    EXPLAIN SELECT * FROM employees e JOIN departments d ON e.department_id = d.department_id;\n    ```\n\n-   ref：\n\n    MySQL 使用非唯一索引扫描来查找行。查询条件使用的索引是非唯一的（如普通索引），例子如下使用了非唯一索引进行查找：\n\n    ```sql\n    EXPLAIN SELECT * FROM employees WHERE department_id = 5;\n    ```\n\n-   range：表示 MySQL 会扫描表的一部分，而不是全部行。范围扫描通常出现在使用索引的范围查询中（如 `BETWEEN`、`>`, `<`, `>=`, `<=`）。下面是范围查询：\n\n    ```sql\n    EXPLAIN SELECT * FROM employees WHERE salary BETWEEN 50000 AND 100000;\n    ```\n\n-   index：表示 MySQL 扫描索引中的所有行，而不是表中的所有行。即使索引列的值覆盖查询，也需要扫描整个索引。以下是使用索引扫描例子：\n\n    ```sql\n    EXPLAIN SELECT name FROM employees;\n    ```\n\n-   all（性能最差）：表示 MySQL 需要扫描表中的所有行，即全表扫描。这通常出现在没有索引的查询条件中。以下是全表扫描例子：\n\n    ```sql\n    EXPLAIN SELECT * FROM employees;\n    ```\n\n#### 6） \uD83C\uDF31 possible_keys\n\n表示查询可能使用的索引列表。\n\n#### 7） \uD83C\uDF31 key\n\n实际使用索引。如果没有使用索引，该字段显示为 `NULL`。\n\n#### 8） \uD83C\uDF31 key_len\n\n这个字段表示使用的索引的长度。该值是根据索引的定义和查询条件计算的。\n\n#### 9） \uD83C\uDF31 rows\n\nMySQL 会估计为了找到所需的行，需要读取的行数。该值是一个估计值，不是精确值。\n\n#### 10）\uD83C\uDF31 filtered\n\n显示查询条件过滤掉的行的百分比。一个高百分比表示查询条件的选择性好。\n\n#### 11）\uD83C\uDF31 Extra\n\n额外信息，如 `Using index`（表示使用覆盖索引）、`Using where`（表示使用 WHERE 条件进行过滤）、`Using temporary`（表示使用临时表）、`Using filesort`（表示需要额外的排序步骤）。\n\n<p align=center><img src=\"https://pic.code-nav.cn/post_picture/1612254411675926529/bDDt3jAK-image-20240426101016819.png\" alt=\"12.jpg\" width=\"50%\" /></p>\n\n看完这个是不是一目了然了捏，那么接下来跟着我看看实际的分析例子吧！！\n\n### 实际例子\uD83C\uDF30\n\n#### 1.创建 employees 表\n\n```sql\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    department_id INT,\n    salary DECIMAL(10, 2),\n    hire_date DATE,\n    INDEX (department_id)\n);\n```\n\n我们要执行以下查询来查找部门 ID 为 5 且薪水在 50000 到 100000 之间的员工，并按薪水降序排序：\n\n```sql\nSELECT employee_id, first_name, last_name, salary\nFROM employees\nWHERE department_id = 5 AND salary BETWEEN 50000 AND 100000\nORDER BY salary DESC;\n```\n\n#### 2.我们先使用 explain 分析计划进行分析：\n\n```sql\nEXPLAIN SELECT employee_id, first_name, last_name, salary\nFROM employees\nWHERE department_id = 5 AND salary BETWEEN 50000 AND 100000\nORDER BY salary DESC;\n```\n\n输出结果如下：\n\n| id | select_type | table     | partitions | type | possible_keys | key           | key_len | ref   | rows | filtered | Extra                       |\n| -- | ----------- | --------- | ---------- | ---- | ------------- | ------------- | ------- | ----- | ---- | -------- | --------------------------- |\n| 1  | SIMPLE      | employees | NULL       | ref  | department_id | department_id | 4       | const | 5000 | 20.00    | Using where; Using filesort |\n\n#### 3.分析执行计划\n\n从执行计划中看出，`type` 为 `ref`，表示使用了 `department_id` 索引，这是个非唯一索引。`key` 为 `department_id` 这个索引，而且 `rows` 为 5000，表示扫描了 5000 行匹配的 `department_id = 5` 的条件。从 `Extra` 看出在应用 `WHERE` 条件后，还需要进行文件排序来满足 `ORDER BY` 子句。\n\n#### 4.找出问题\n\n尽管查询使用了索引，但由于索引不完全覆盖查询的条件和排序，查询需要进行额外的文件排序。这可能会导致性能瓶颈，特别是在结果集较大时。\n\n#### 5.优化解决它！\n\n**创建复合索引**\n\n创建一个包含 `department_id` 和 `salary` 的复合索引，这样可以覆盖查询的 `WHERE` 和 `ORDER BY` 条件：\n\n```sql\nCREATE INDEX idx_department_salary ON employees (department_id, salary);\n```\n\n复合索引可以使查询在扫描 `department_id` 列时，同时按 `salary` 列排序，避免额外的文件排序。\n\n**再次执行计划分析**\n\n优化后的 `EXPLAIN` 输出如下：\n\n| id | select_type | table     | partitions | type  | possible_keys         | key                   | key_len | ref  | rows | filtered | Extra       |\n| -- | ----------- | --------- | ---------- | ----- | --------------------- | --------------------- | ------- | ---- | ---- | -------- | ----------- |\n| 1  | SIMPLE      | employees | NULL       | range | idx_department_salary | idx_department_salary | 5       | NULL | 500  | 100.00   | Using where |\n\n#### 6.分析优化后的结果\n\n从新的 `EXPLAIN` 输出中可以看出：\n\n-   **type**: `range`，表示使用范围扫描，这是个相对高效的访问类型。\n-   **key**: `idx_department_salary`，表示实际使用了复合索引。\n-   **rows**: 500，估计读取的行数减少了，因为索引更精确地覆盖了查询条件。\n-   **Extra**: 仅显示 `Using where`，不再需要文件排序，因为索引已经覆盖了排序需求。\n\n\n<p align=center><img src=\"https://pic.code-nav.cn/post_picture/1612254411675926529/8nzDaRtW-image-20240423103604502.png\" alt=\"Snipaste_2024-04-23_11-09-44.png\" width=\"30%\" /></p>\n\n是不是分析起来很简单咧，完结撒花！！！！，除了新增联合索引的方式，你们还知道什么优化策略吗？\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1612254411675926529/9FaV18J6-image-20240423103604502.png",
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 46,
        "thumbNum": 6,
        "favourNum": 0,
        "commentNum": 3,
        "priority": 0,
        "userId": "1612254411675926529",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "editTime": "2024-05-21 10:09:54",
        "createTime": "2024-05-21 10:09:54",
        "updateTime": "2024-05-22 19:02:31",
        "accessScope": 0,
        "user": {
          "id": "1612254411675926529",
          "planetCode": "12852",
          "userName": "聪ζ",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1612254411675926529/JbN5T832-1.jpg",
          "gender": 1,
          "userProfile": "一个喜欢捣鼓小玩意的小程序员",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": "本科",
          "graduationYear": 2023,
          "jobStatus": "已工作",
          "company": null,
          "job": "后端",
          "workYear": null,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/lhccong",
          "blog": "https://juejin.cn/user/1146154496301956/posts",
          "score": 0,
          "scoreLevel": 1,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-08-21 21:17:54",
          "lastLoginTime": null,
          "createTime": "2023-01-09 09:06:20",
          "updateTime": "2024-05-21 15:41:32"
        },
        "tags": [
          "文章",
          "数据库",
          "面试题",
          "面试"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      },
      {
        "id": "1792735479532863490",
        "title": "\uD83D\uDC96如何爱上写项目、写好项目，不妨看看我的做法",
        "description": "爱上写项目真的很简单！在大学期间的我，其实不能说不爱写项目，但是总是写出屎山代码、写出自己都不愿维护的代码。我写过很多项目包括尚硅谷的、黑马的、微信小程序的、接单的。但是这些项目都有一些共同点！",
        "content": "## 开篇\n\n爱上写项目真的很简单！在大学期间的我，其实不能说不爱写项目，但是总是写出屎山代码、写出自己都不愿维护的代码。我写过很多项目包括尚硅谷的、黑马的、微信小程序的、接单的。但是这些项目都有一些共同点！再次看它我不愿维护啊！当我项目越写越多，我会发现项目就像自己的孩子、自己的游戏角色，你要会打扮它，给它变强、变帅气，你才会越来越喜欢上它，就跟游戏一样，你也不喜欢你的游戏人物又丑又垃圾吧。\n\n## 拥有并打扮一下自己的 Github\n\n相信有很大部分人的 Github 是没有个人简介的、也没有头像。是个二维码头像，我以前也是这样，每次看见这个头像我都百感交集啊，我根本不想碰它。\n\n我一开始荒废的 Github 是这样的：\n\n\n![image-20240510092457155.png](https://pic.code-nav.cn/post_picture/1612254411675926529/lrCMjNpB-image-20240510092457155.png)\n\n经过我打扮的 Github （<https://github.com/lhccong>）：\n\n\n![image-20240510092548802.png](https://pic.code-nav.cn/post_picture/1612254411675926529/v5n4UjpA-image-20240510092548802.png)\n\n一个好的 Github 主页不仅能吸引面试官和小伙伴们的兴趣，还能提高自己的编程兴趣。每次看见自己的主页又能多一个项目、又多了 star 数、关注。心里对开发项目的兴趣又高了几分。\n\n关于主页如何打扮，只需要创建一个跟自己名字一样的仓库，里面写一个 README.md 就可以显示在主页啦！是不是十分简单又便捷，至于具体的样式可以参考市面上优秀的作者：程序员鱼皮（鱼总\uD83D\uDC1F）直接 Copy 完事 随便改改参数。\n\n## 给新项目取个好名字、搞个好图标\n\n像我写项目有个习惯，我不喜欢一上来就开始写项目，我喜欢先配合 GPT 给我的项目取个好听的名字\uD83D\uDD25，我经常是这样干的，比如说我的微狗、短链狗、SQL 慢镜 也是有问过 GPT 的意见。\n\n至于好图标，我是通过鱼聪明（<https://www.yucongming.com/app/draw>）生成的，之前白嫖到的鱼毛来进行图标生成，给大家看看我的几个图标吧。\n\n<p align=center><img src=\"https://pic.code-nav.cn/post_picture/1612254411675926529/MjV0y3Cv-image-20240510093634316.png\" alt=\"image-20240510093709272.png\"  /></p>\n\n<p align=center><img src=\"https://pic.code-nav.cn/post_picture/1612254411675926529/sJwfuKIW-image-20240510093709272.png\" alt=\"image-20240510093709272.png\"  /></p>\n\n\n好的图标能让别人更加的对你的项目好奇，也会提高你自己的兴趣喔。\n\n## 将大提交改成小提交\n\n这句话是什么意思呢，之前的我是每次写完一大堆代码，再一次性提交上去。这样的写法会导致项目十分难以维护，你根本都不知道自己一大段提交做了什么，到后面你自己的代码就不想看了，我的做法是什么呢？我将每次的小功能、小代码都弄成一次提交，最后统一的进行 push ，这样当你自己或者别人查看你的代码时，都会清楚明白你这次改动做了什么。举个例子：就好像我前段时间学习的 yu-rpc，我自己的提交就有一百多次。\n\n\n\n![image-20240510094446449.png](https://pic.code-nav.cn/post_picture/1612254411675926529/12dQukZf-image-20240510094446449.png)\n\n我经常用的提交格式： 新增功能时用 feat 、 修改代码时用 fix 、修改、新增文档时用 docs\n\n## 给代码穿好衣服\n\n相信大家也是很讨厌写注释，但是写注释不仅能让别人能懂你的代码，更重要是自己在阅读代码的时候能更好的快速回顾自己的代码是干了什么，能帮助自己快速的维护，现在都是 AI 时代，我自己写代码的时候对于普通的代码我都会使用 AI（CodeGeex）来进行注释生成、比较特殊的代码我会自己进行注释修改。\n\n\n\n![image-20240510095442156.png](https://pic.code-nav.cn/post_picture/1612254411675926529/8CCL9pBe-image-20240510095442156.png)\n\n## 不要忽略提交预警\n\n相信大家在提交的时候会看见自己的代码有很多黄色波浪线、提交的时候还会弹出框来预警：\n\n\n![image-20240510095626960.png](https://pic.code-nav.cn/post_picture/1612254411675926529/wBmT9Oee-image-20240510095626960.png)\n\n我推荐大家先尝试将这些预警修复，每当我看见一个项目有十分多黄色波浪线时，我的代码强迫症就会出现（现实我是没有强迫症的），现在的我总喜欢一个一个将黄色修复，这样下次写起来也会让自己的代码更加规范、更加美观。\n\n## 不妨写个好看的 README.md\n\n一个好看的项目介绍文档能吸引别人注意力、能让人家更想了解你的项目。可以参考别人开源项目的 README.md 直接 Copy！稍作修改就能成为自己项目的介绍啦~大家可以赶快去上手试一下，在介绍中可以加入自己的项目截图、项目技术栈喔，附上我的一个项目介绍：\n\n\n\n<p align=center><img src=\"https://pic.code-nav.cn/post_picture/1612254411675926529/mwbcbxiL-image-20240510100116317.png\" alt=\"image-20240510100116317.png\"  /></p>\n\n## 学习好项目\n\n我现在比较喜欢学习别人的优秀项目，比如 Sa-Token 、MyBatis、JustAuth ，参考着市面上的开源项目我也写出了：\n\n1）SQL 慢镜：<https://github.com/lhccong/sql-slow-mirror>\n\n2）OneAuth：<https://github.com/lhccong/OneAuth>\n\n3）Switch-HTTP：<https://github.com/lhccong/switch-http>\n\n4）AsyncX：<https://github.com/lhccong/AsyncX>\n\n觉得写的还不错的代码可以给我一个免费的小星星⭐⭐喔\n\n那这些项目都从哪发现的呢？我有以下几个渠道：\n\n1）直接 Github 上搜索 Java 项目高 Star 的开源项目。\n\n2）在 Gitee 上有一个 GVP 项目，最有价值开源项目选择 Java 类型的来学习。\n\n3）查看技术博主推的一些开源学习项目。\n\n## 坚持自己的知识输出\n\n当我每次发帖子都会发现，我不仅分享了知识，我还加深了自己对知识的理解，对于知识的加深更加提高了我对代码的喜欢，我喜欢在星球上分享自己学习到的知识、在掘金、CSDN 有时也会一起分享，看到大家给我点赞也能满足自己的一点小小虚荣心吧哈哈哈。\n\n给大家分享下我的掘金跟 CSDN\n\n掘金\uD83D\uDEEB：<https://juejin.cn/user/1146154496301956/posts>\n\nCSDN\uD83D\uDD25：<https://blog.csdn.net/LHCong>_\n\n以上就是我的分享啦~感谢大家看到最后，我是聪ζ希望可以跟大家一起学习，我的 Github：<https://github.com/lhccong>，如果里面有你感兴趣的项目不妨给我点个星星⭐和关注\uD83D\uDD25，未来我还会持续写新的好玩的小项目。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1612254411675926529/rK8VWC4w-image-20240510092548802.png",
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 41,
        "thumbNum": 7,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1612254411675926529",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "editTime": "2024-05-21 09:53:40",
        "createTime": "2024-05-21 09:53:40",
        "updateTime": "2024-05-22 17:57:29",
        "accessScope": 0,
        "user": {
          "id": "1612254411675926529",
          "planetCode": "12852",
          "userName": "聪ζ",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1612254411675926529/JbN5T832-1.jpg",
          "gender": 1,
          "userProfile": "一个喜欢捣鼓小玩意的小程序员",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": "本科",
          "graduationYear": 2023,
          "jobStatus": "已工作",
          "company": null,
          "job": "后端",
          "workYear": null,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/lhccong",
          "blog": "https://juejin.cn/user/1146154496301956/posts",
          "score": 0,
          "scoreLevel": 1,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-08-21 21:17:54",
          "lastLoginTime": null,
          "createTime": "2023-01-09 09:06:20",
          "updateTime": "2024-05-21 15:41:32"
        },
        "tags": [
          "文章",
          "GitHub",
          "后端",
          "开源",
          "Java"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      },
      {
        "id": "1792496988945367042",
        "title": "法拉第未来一夜暴涨 367%，贾跃亭回国有望了？",
        "description": null,
        "content": "贾跃亭做个人ip，这是要模仿罗永浩的“真还传”？\n\n法拉第未来（FF）、乐视创始人贾跃亭前不久刚跳出来表示要做个人 IP，5 月 14 号，美股法拉第未来就出现股价异常波动，开盘暴涨190%，**截至当日收盘，报收0.285美元/股，涨367.21%，涨幅居全美股第二**。\n\n要知道，法拉第未来之前才收到纳斯达克的退市警告，贾跃亭这次打出的旗号，就是想当”网红“还债救 FF。\n\n虽然当天就被法拉第未来在官网上无情撇清关系，表示这只是贾跃亭的个人行为，但贾老板的个人视频已经发起来了。\n\n### 贾跃亭其人\n\n股市的风波可以让子弹再飞一会。\n\n以防有些年轻的朋友对这个名字感到陌生，趁此机会，我们搜集了各路相关信息，以简历的方式带大家回顾一下贾跃亭的职业生涯。\n\n> 完整简历在线查看：https://laoyujianli.com/open/resume/jiayueting?type=1\n\n![点击阅读原文查看完整版贾跃亭简历](https://pic.yupi.icu/yuyi/%E8%B4%BE%E8%B7%83%E4%BA%AD%E7%AE%80%E5%8E%86%E8%A3%81%E5%89%AA%E7%89%88.png)\n\n\n\n### 当网红，真是为了 FF？\n\n关于个人 IP 商业化，贾总还真不是说说而已。\n\n截止目前，贾跃亭个人名字开通的视频号已发布 4 条视频，其中最新一条拍摄了自己的工作日常，并喊话“成长吧！奋斗者”。\n\n与此同时，另一位深谙流量之道的互联网活跃分子孙宇晨发视频称，愿意投资贾跃亭的个人 IP 商业化项目，还表示自己以前的创业受到很多贾跃亭思想的影响。\n\n尽管贾跃亭说得非常好听：“自己想做的不是简单的直播带货，而是通过模式创新、AI 技术创新，IP电商全球化，中国品牌出海等几个维度来探索一条IP电商2.0的新路径，希望自己的失败经历让大家少踩坑，多成长。“\n\n但网友们还是犀利指出，怕不是看到雷军和周鸿祎的流量眼红了，也想分一杯羹。打出了“为救 FF“的旗号，当网红赚钱还债，这套路走得还是罗永浩的老路。\n\n对于贾跃亭的这番新动作，你怎么看？\n\n----\n\n\n\n可访问我的 Github：https://github.com/liyupi ，了解更多技术和项目内容。",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 19,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "editTime": "2024-05-20 18:05:59",
        "createTime": "2024-05-20 18:05:59",
        "updateTime": "2024-05-22 19:18:51",
        "accessScope": 0,
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 3335,
          "scoreLevel": 7,
          "coin": 170,
          "followeeNum": 1559,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2287-05-20 01:46:39",
          "lastLoginTime": null,
          "createTime": "2022-12-09 12:32:33",
          "updateTime": "2024-05-22 16:29:50"
        },
        "tags": [
          "文章",
          "简历"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      },
      {
        "id": "1792193343515373570",
        "title": "有没有哪些小厂还在招实习呀",
        "description": "本人25届，非常愁实习，大厂肯定无望，只想暑假找到个实习有个经验",
        "content": "本人25届，非常愁实习，大厂肯定无望，只想暑假找到个实习有个经验",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 8,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1792193084991057921",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": "1601072287388278786",
        "reviewTime": "2024-05-21 19:00:13",
        "editTime": "2024-05-20 17:04:20",
        "createTime": "2024-05-19 21:59:25",
        "updateTime": "2024-05-22 16:34:12",
        "accessScope": 0,
        "user": {
          "id": "1792193084991057921",
          "planetCode": null,
          "userName": "\uD83E\uDD5F",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEI3EldP4TQicjn2jLickDMQfKpJqNLKqMfVvvnwrbjR7cnLsU6GbSaRCTicic9ib7mVH78GbG3BBak6qiapIN1CuZiazVaicTI1Usu4FiaeBKD4r6f4pUA/132",
          "gender": null,
          "userProfile": null,
          "userRole": "user",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "scoreLevel": 1,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": null,
          "lastLoginTime": null,
          "createTime": "2024-05-19 21:58:23",
          "updateTime": "2024-05-19 21:58:23"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      },
      {
        "id": "1792192846272245762",
        "title": "VUEX 3.x源码分析——1. 理解state",
        "description": "这是对vuex3.x版本的源码分析",
        "content": "本次分析会按以下方法进行：\n1. **按官网的使用文档顺序**，围绕着某一功能点进行分析。这样不仅能学习优秀的项目源码，更能加深对项目的某个功能是如何实现的理解。这个对自己的技能提升，甚至面试时的回答都非常有帮助。\n2. 在围绕某个功能展开讲解时，**所有不相干的内容都会暂时去掉**，等后续涉及到对应的功能时再加上。这样最大的好处就是能循序渐进地学习，同时也不会被不相干的内容影响。省略的内容都会在代码中以...表示。\n3. 每段代码的开头都会说明它所在的文件目录，方便定位和查阅。如果一个函数内容有多个函数引用，这些都会放在同一个代码块中进行分析，不同路径的内容会在其头部加上所在的文件目录。\n\n本章只讲解vuex中的state，这也是vuex官网中“核心概念”的第一个。\n### State的初始化\n当我们创建了一个store时，state发生了什么。\n假设我们按官网的内容，初始化了一个最基础的store：\n\n```javascript\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  }\n  // 这里去掉了 mutations 的内容，只关注state\n})\n```\n- 这里实例上是创建了一个Store类，并将count内容作为参数传入\n\n```javascript\n// ./index.js\nimport { Store } from './store'\n// Vuex.Store 就是这里的Store，它是从 ./store 导入的\nexport default {\n\tStore,\n\t...\n}\n\n// ./store.js\nimport ModuleCollection from './module/module-collection'\nexport class Store{\n\tconstructor(options = {}) {\n\t\t...\n\t\tthis._modules = New ModuleCollection(options)\n\t\tconst state = this._modules.root.state\n\t\t// 可以看出是来自于ModuleCollection类的，那接着看下一段 ModuleCollection 的代码\n\t}\n}\n\n// ./module/module-collection.js\nimport Module from './module'\nexport default class ModuleCollection {\n\tconstructor(rawRootModule) {\n\t\tthis.register([], rawRootModule, false)\n\t}\n\t...\n\tregister(path, rawModule, runtime=true) {\n\t\tconst newModule = new Module(rawModule, runtime)\n\t\tif (path.length === 0) {\n\t\t\tthis.root = newModule\n\t\t} else {...}\n\t\t...\n\t}\n}\n\n// ./module/module.js\nexport default class Module {\n\tconstructor(rawModule, runtime) {\n\t\tthis._rawModule = rawModule\n\t\t// 最后在这里处理我们传入的state，Module.state\n\t\tconst rawState = rawModule.state\n\t\t// 这里能让我们定义的state除了可以是对象，还可以是函数\n\t\tthis.state = (typeof rawState === 'function' ? rawState() : rawState) || {}\n\t}\n}\n```\n- 至此，可以看出store在初始化时，将定义的state内容赋值到了module.state上,\n- 同时将module绑定到 ModuleCollection.root，\n- 并将实例化的ModuleCollection赋值给Store._modules\n- 最后，为了让vue能监测到state的变化并更新响应的组件，调用了vue中的reactive函数，创建了一个**响应式对象** store._state = {data: state}，代码如下：\n\n```javascript\n// ./store.js\nimport { resetStoreState } from './store-util'\nexport class Store {\n\tconstructor(options = {}) {\n\t\t...\n\t\tthis._modules = new ModuleCollection(options)\n\t\t...\n\t\tconst state = this._modules.root.state\n\t\t...\n\t\t// 在这里生成响应式对象 this._state\n\t\tresetStoreState(this, state)\n\t}\n}\n\n// ./store-util.js\nimport { reactive } from 'vue'\nexport function resetStoreState(store, state, hot) {\n\t...\n\tstore._state = reactive({data: state})\n\t...\n}\n```\n- 在这里还没有结束，因为如果按上面的内容，我们要使用定义的count属性的话，代码应该是\nstore._state.data.count\n- 但实际上是 store.state.count。vuex还做了一些简单的处理，就是**定义了一个getter方法**，\n- 另外还**对state设置了setter方法**，来阻止用户直接修改state的值\n- 下面是store.js文件中目前我们所接触的所有代码\n\n```javascript\n// ./store.js\nimport ModuleCollection from './module/module-collection'\nimport { resetStoreState } from './store-util'\n\nexport class Store {\n\tconstructor(options = {}) {\n\t\t...\n\t\tthis._modules = new ModuleCollection(options)\n\t\tconst state = this._modules.root.state\n\t\tresetStoreState(this, state)\n\t}\n\t\n\tget state() {\n\t\treturn this._state.data\n\t}\n\t\n\tset state(v) {\n\t\tif (__DEV__) {\n\t\t\tassert(false, `use store.replaceState() to explicit replace store state.`)\n\t\t}\n\t}\n}\n```\n- 之前使用vuex时，经常有人说直接修改state的属性会告警且不能修改，原因就在这里。\n- 但我们通过源码分析可以发现，vuex其实并没有阻止使用者修改state，只是阻止了开发环境的修改，如果部署到生成环境就可以直接修改且不会告警。至于官方建议使用mutation方式来提交修改，说更明确地追踪到状态的变化，等后续源码分析完后就能深刻地理解了。\n### mapState 辅助函数\n- 先看下官方的示例：\n\n```javascript\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n}\n\n// 当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。\ncomputed: mapState([\n  // 映射 this.count 为 store.state.count\n  'count'\n])\n```\n- 让我们看下vuex的源码，是如何实现辅助生成计算属性这个功能的，同时还保证了多种定义计算属性的方法，同时既可以传入对象，又可以传入数组。\n- 首先 mapState 函数定义在 ./helpers.js 中\n- normalizeNamespace是一个高阶函数，它接受一个函数作为参数，并返回一个函数。在它的返回函数中，接受namespace和map作为参数，返回normalizeNamespace接受的函数的执行结果。\n- 在normalizeNamespace的代码中，如果namespace不是字符串类型的话，就将两个参数的值互换，这样保证我们传入的第一个参数（实例中的对象或数组）会被赋值给第二个参数。但是我感觉这里一股别扭感，按道理map在前，namespace在后更合理一些，也不用交换两个参数的值了。可能是为了保持某种使用习惯的统一吧。\n- 所以 mapState  就是 normalizeNamespace 返回的函数。当按上面官方的例子执行类似 mapState(...)的时候，就是将...作为参数传入normalizeNamespace接受的函数，并执行这个函数，返回结果。\n- vuex还有其他地方都有使用这种类似的高阶函数，大致就是接受的参数是一个函数A，同时返回的也是一个函数B，在返回的函数B里执行接受的函数A的操作。\n- 之后 normalizeMap 函数将我们传入的state做了格式化处理，这里的代码解释了为什么mapState传入的参数既可以是对象，也可以是数组。\n- 格式化参数后states后，遍历新的数组，得到res对象。这个对象的key是我们传参时的对象的key或者数组的每个元素，value是一个函数，或者我们定义的函数。\n\n```javascript\n// ./helper.js\nexport const mapState = normalizeNamespace((namespace, states) => {\n\tconst res = {}\n\tnormalizeMap(states).forEach(({ key, val }) => {\n\t\tres[key] = function mappedState() {\n\t\t\tlet state = this.$store.state\n\t\t\tlet getters = this.$store.getters\n\t\t\t...\n\t\t\t// 这里保证我们在使用mapState时，既可以直接使用state的某个属性，\n\t\t\t// 也可以函数式地定义来获得某个计算属性\n\t\t\t// 同时在使用函数式定义时，\n\t\t\t// 还能获得当前组件的相关内容(this)，以及store中的state和getters\n\t\t\treturn typeof val === 'function' ? val.call(this, state, getters) : state[val]\n\t\t}\n\t})\n\treturn res\n})\n// normalizeNamespace()括号包裹住的整个部分就是normalizeNamespace它接受的参数，也是一个函数，mapState就是它返回的函数\n\nfunction normalizeNamespace(fn) {\n\t// 下面就是 mapState 会执行的函数内容\n\treturn (namespace, map) => {\n\t\tif (typeof namespace !== 'string') {\n\t\t\tmap = namespace\n\t\t\tnamespace = ''\n\t\t} else {...}\n\t\treturn fn(namespace, map)\n\t}\n}\n\nfunction normalizeMap(map) {\n\tif (!isValidMap(map)) {\n\t\treturn []\n\t}\n\treturn Array.isArray(map)\n\t\t? map.map(key => ({key, val: key})\n\t\t: Object.keys(map).map(key => ({key, val: map[key]}))\n}\n```\n- 所以，**mapState是一个高阶函数的返回函数**。\n- 执行mapState后，会返回一个对象res，如果我们传入mapState的参数是对象，那res的key就是传参对象的key；如果传入的参数是数组，那这个res的key就是数组中的每个元素。\n- **res的value都是一个待执行的mappedState函数**。\n- 这个res对象作为当前组件的计算属性。\n- 当计算属性所依赖的响应式数据发生变化时，对应的mappedState函数才会执行，然后根据最新的state和getter来计算并返回相应的值。\n- 这种设计模式使得状态的映射可以延迟到组件的计算属性被访问时执行。这样做的好处是可以确保状态映射总是基于最新的 state 和 getters，并且可以利用 Vue 的响应式系统来自动更新。\n- 同时通过分析源码，还发现了除了可以利用state以外，还能访问到getters的内容，这个是官网没写的，例如，我们可以这样修改官方的例子：\n\n```javascript\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n    // 函数还可以接受getters，例如：\n    countPlusLocalState_2(state, getters) {\n\t\treturn state.count + this.localCount + getters.doubleCount\n\t}\n  })\n}\n```\n- 最后就是官网的“对象展开运算符”\n- 只要理解了mapState是返回一个对象，以及展开运算符的意义，就知道必然能这样使用了\n\n```javascript\ncomputed: {\n  localComputed () { /* ... */ },\n  // 使用对象展开运算符将此对象混入到外部对象中\n  ...mapState({\n    // ...\n  })\n}\n```\n以上就是官网上state的相关源码，下一遍会分析getters的实现源码。\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 6,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1790673347646369793",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "editTime": "2024-05-20 17:04:20",
        "createTime": "2024-05-19 21:57:26",
        "updateTime": "2024-05-20 17:22:55",
        "accessScope": 0,
        "user": {
          "id": "1790673347646369793",
          "planetCode": "30903",
          "userName": "zest",
          "userAvatar": null,
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "深圳",
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 3,
          "direction": "后端",
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "scoreLevel": 1,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-12-30 22:34:37",
          "lastLoginTime": null,
          "createTime": "2024-05-15 17:19:29",
          "updateTime": "2024-05-15 17:21:56"
        },
        "tags": [
          "文章",
          "前端",
          "Vue",
          "开源"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      },
      {
        "id": "1792044736384446466",
        "title": "前端程序员如何学习 Docker （二）？",
        "description": "通过一个包含 Redis 和 Next.js 技术的项目，本文介绍了如何使用 Docker 和 Docker Compose 进行容器化部署，并实现数据持久化。同时指出目前还没有使用 Nginx 部署",
        "content": "<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 10px; padding-right: 10px; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; font-family: Optima, 'Microsoft YaHei', PingFangSC-regular, serif; font-size: 16px; color: rgb(0, 0, 0); line-height: 1.5em; word-spacing: 0em; letter-spacing: 0em; word-break: break-word; overflow-wrap: break-word; text-align: left;\"><p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">大家好，我是阿星，上一个文章：<a href=\"https://www.yuque.com/asgas/web_system/th4kazgysrzuktxn?view=doc_embed\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">更适合前端的 Docker 教程（一）</a>，我分享了 Docker 基础，如何通过 Docker &nbsp;容器化部署一个纯前端的项目，但是真实项目，肯定是离不开后端的，下面就以一个需要 nextjs + redis 技术的项目为例，来入门一下 <code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">Docker Compose</code></p>\n<h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: block; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.5em; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(34, 34, 34); line-height: 1.8em; letter-spacing: 0em; padding-top: 0px; padding-bottom: 0px; padding-left: 10px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: solid; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 5px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(145, 109, 213); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; box-shadow: none; display: block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">本地启动项目</span><span class=\"suffix\" style=\"display: none;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">我们先本地启动一下需要这些技术的项目，这里直接 git 拉取仓库就好：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\">git&nbsp;<span class=\"hljs-built_in\" style=\"color: #e6c07b; line-height: 26px;\">clone</span>&nbsp;-b&nbsp;day1&nbsp;git@github.com:mqyqingfeng/next-react-notes-demo.git<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">本地运行</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\"><span class=\"hljs-built_in\" style=\"color: #e6c07b; line-height: 26px;\">cd</span>&nbsp;next-react-notes-demo&nbsp;&amp;&amp;&nbsp;npm&nbsp;i&nbsp;&amp;&amp;&nbsp;npm&nbsp;run&nbsp;dev<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">由于这个项目需要 Redis 服务，我们新开一个命令行运行：<code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">redis-server</code>,如果没有安装 redis，需要先安装一下 Redis。\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716039517240-77341e5b-509b-4fe2-b86c-43520af8b367-20240519110247970.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n本地没有问题，我们就使用 Docker 来运行我们的服务。</p>\n<h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: block; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.5em; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(34, 34, 34); line-height: 1.8em; letter-spacing: 0em; padding-top: 0px; padding-bottom: 0px; padding-left: 10px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: solid; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 5px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(145, 109, 213); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; box-shadow: none; display: block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">容器化部署</span><span class=\"suffix\" style=\"display: none;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">使用上个文章的知识，我们现在把 Redis 和 Next.js 项目 容器化部署</p>\n<ol data-tool=\"mdnice编辑器\" style=\"list-style-type: decimal; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">拉取 Redis 镜像：<code style=\"background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker pull redis</code></section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">关闭本地命令行启动的 Redis ，使用 Docker 启动 Redis：<code style=\"background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker run -p 6379:6379 redis redis-server</code>\n关闭本地的Redis 后，我们的项目刷新是会报错的：\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716040532374-9c379147-ff1c-4fc5-b01d-ee11c3806570-20240519110435400.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n使用 Docker 启动 Redis 后，就恢复了</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">我们完成了 Redis 容器化，我们现在把 Next.js 项目也新开一个容器进行部署，但是每个容器都是一个单独的隔离空间。这时候<strong style=\"color: rgb(145, 109, 213); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">即将容器化部署的 Next.js 服务就访问不到我们的 Redis 服务</strong>。那么我们就需要将两个容器服务连接起来，Docker 可以将容器加入<a href=\"https://tongyi.aliyun.com/qianwen/share?shareId=ec14926d-0ee9-4b98-b4f6-17e4b1d604ec\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">自定义的 Docker 网络</a>的方式来连接多个容器。</section></li></ol>\n<blockquote class=\"multiquote-1\" data-tool=\"mdnice编辑器\" style=\"margin-top: 20px; margin-bottom: 20px; margin-left: 0px; margin-right: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; border-top-style: none; border-bottom-style: none; border-left-style: solid; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgb(216, 156, 246); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; background-attachment: scroll; background-clip: border-box; background-color: rgb(244, 238, 255); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px; display: block; overflow-x: auto; overflow-y: auto;\"><span style=\"display: none; color: rgb(0, 0, 0); font-size: 16px; line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: normal;\"></span>\n<p style=\"text-indent: 0em; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; color: rgb(0, 0, 0); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px;\">Docker 支持自定义网络，这里我们使用桥接网络来连接多个容器，容器间就可以通信了！</p>\n</blockquote>\n<ol start=\"4\" data-tool=\"mdnice编辑器\" style=\"list-style-type: decimal; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">创建一个 自定义 Docker 网络：<code style=\"background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker network create -d bridge react-notes</code></section></li></ol>\n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: circle; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">-d bridge ：参数指定 Docker 网络类型，有 bridge、overlay。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">react-notes 为我们的自定义网络的名字</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">5）暂停或者删除之前开启的 Redis 容器，运行一个新的 Redis 容器并连接到新建的 react-notes 网络：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\">docker&nbsp;run&nbsp;-p&nbsp;6379:6379&nbsp;--network&nbsp;react-notes&nbsp;redis&nbsp;redis-server<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">6）查找 redis 容器的 IP 地址：<code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker network inspect react-notes</code>得到 IPv4Address 的 host 将其设置为 lib/redis.js 的 Redis host\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716045727049-82db773b-07a9-4efc-9061-e1526ed7e754-20240519110515029.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n7)为 Next.js 项目创建 Dockerfile，上篇文章讲了每行命令的含义</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">FROM</span>&nbsp;node:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">18</span>-alpine<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">WORKDIR</span><span class=\"bash\" style=\"line-height: 26px;\">&nbsp;/app</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">COPY</span><span class=\"bash\" style=\"line-height: 26px;\">&nbsp;.&nbsp;.</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">RUN</span><span class=\"bash\" style=\"line-height: 26px;\">&nbsp;npm&nbsp;install&nbsp;--registry=https://registry.npmmirror.com</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">CMD</span><span class=\"bash\" style=\"line-height: 26px;\">&nbsp;&nbsp;npm&nbsp;run&nbsp;build&nbsp;&amp;&amp;&nbsp;npm&nbsp;start</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">EXPOSE</span>&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">3000</span><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">8）有了 Dockerfile ，我们就可以为项目打包镜像。执行：<code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker image build -t next-react-notes-demo:0.0.1 .</code>创建镜像</p>\n<ol start=\"9\" data-tool=\"mdnice编辑器\" style=\"list-style-type: decimal; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">运行打包好的镜像，生成一个实例：<code style=\"background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker run -p 4000:3000 --network react-notes next-react-notes-demo:0.0.1</code>\n本地访问 <a href=\"http://localhost:4000/\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">http://localhost:4000/</a> 我们应该可以看到页面，但是我们这样设置网络，设置每个容器，是不是很麻烦？没错我们可以使用** Docker Compose 来帮我们管理多个容器**</section></li></ol>\n<h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: block; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.5em; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(34, 34, 34); line-height: 1.8em; letter-spacing: 0em; padding-top: 0px; padding-bottom: 0px; padding-left: 10px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: solid; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 5px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(145, 109, 213); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; box-shadow: none; display: block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">Docker Compose</span><span class=\"suffix\" style=\"display: none;\"></span></h2>\n<blockquote class=\"multiquote-1\" data-tool=\"mdnice编辑器\" style=\"margin-top: 20px; margin-bottom: 20px; margin-left: 0px; margin-right: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; border-top-style: none; border-bottom-style: none; border-left-style: solid; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgb(216, 156, 246); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; background-attachment: scroll; background-clip: border-box; background-color: rgb(244, 238, 255); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px; display: block; overflow-x: auto; overflow-y: auto;\"><span style=\"display: none; color: rgb(0, 0, 0); font-size: 16px; line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: normal;\"></span>\n<p style=\"text-indent: 0em; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; color: rgb(0, 0, 0); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px;\">Docker Compose 是一个用于定义和运行多容器 Docker 应用的工具。通过编写一个 docker-compose.yml 文件，你可以在其中定义所有服务、网络和卷，然后使用一个命令就能启动和管理这些服务。</p>\n</blockquote>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">三个核心概念：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: circle; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">服务：也就是容器，例如上面的前端网页服务和 Redis 服务</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">网络：Docker Compose 会创建一个默认网络让所有服务互相连接，你也可以定义自定义网络</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">卷：用于在服务（容器）之间共享和持久化数据。可以在开头创建数据卷，给服务使用</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">先查看是否安装了 Docker Compose，如果是安装 Docker 客户端，是会默认安装上的</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\">docker-compose&nbsp;--version<br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;应该能看到：Docker&nbsp;Compose&nbsp;version&nbsp;v2.27.0-desktop.2&nbsp;这样的返回</span><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">我们编写 docker-compose.yml 文件（模板文件的各种指令含义可以参考<a href=\"https://yeasy.gitbook.io/docker_practice/compose/compose_file\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">https://yeasy.gitbook.io/docker_practice/compose/compose_file</a>）：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;使用&nbsp;Docker&nbsp;Compose&nbsp;文件格式版本&nbsp;3.8。这版本支持新的功能和属性，同时确保与&nbsp;Docker&nbsp;引擎的兼容性。</span><br>version:&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'3.8'</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;定义了应用的所有服务，每个服务对应一个容器。</span><br>services:<br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;服务名称，可以任意字符串，这里是&nbsp;Redis&nbsp;服务</span><br>&nbsp;&nbsp;redis:<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;指定镜像，从&nbsp;Docker&nbsp;Hub&nbsp;下载该镜像</span><br>&nbsp;&nbsp;&nbsp;&nbsp;image:&nbsp;redis<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;将容器的&nbsp;6379&nbsp;端口映射到主机的&nbsp;6379&nbsp;端口。这使得在本地可以通过端口&nbsp;6379&nbsp;访问&nbsp;Redis&nbsp;服务。&nbsp;&nbsp;&nbsp;&nbsp;ports:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'6379:6379'</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;指定容器启动时执行的命令，这里是&nbsp;redis-server，即启动&nbsp;Redis&nbsp;服务器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\" style=\"color: #e6c07b; line-height: 26px;\">command</span>:&nbsp;redis-server<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;nextjs&nbsp;前端网页服务</span><br>&nbsp;&nbsp;nextapp:<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;构建镜像时使用当前目录，nextapp&nbsp;服务的镜像将根据当前目录中的&nbsp;Dockerfile&nbsp;构建。&nbsp;&nbsp;&nbsp;</span><br>&nbsp;&nbsp;build:&nbsp;.<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;将容器的&nbsp;3000&nbsp;端口映射到主机的&nbsp;4000&nbsp;端口。</span><br>&nbsp;&nbsp;&nbsp;&nbsp;ports:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'4000:3000'</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;nextapp&nbsp;服务依赖&nbsp;redis&nbsp;服务。这意味着在启动&nbsp;nextapp&nbsp;服务之前，Docker&nbsp;Compose&nbsp;会先启动&nbsp;redis&nbsp;服务。&nbsp;&nbsp;&nbsp;&nbsp;depends_on:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;redis<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">我为每行添加了注释，使用的时候注释记得删除掉，不然会有问题，关于 yml 文件的基本知识，参考：<a href=\"https://tongyi.aliyun.com/qianwen/share?shareId=3595cfd4-da10-4a85-9087-470f28271eea\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">https://tongyi.aliyun.com/qianwen/share?shareId=3595cfd4-da10-4a85-9087-470f28271eea</a>\n我们还需要之前编写的 Dockerfile ,我们还需要修改 redis.js</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">const</span>&nbsp;redis&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Redis({<br>&nbsp;&nbsp;<span class=\"hljs-attr\" style=\"color: #d19a66; line-height: 26px;\">host</span>:&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'redis'</span><br>})<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">我们这时候命令行运行 Docker Compose 脚本：<code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker-compose up</code>\ndocker-compose up 会尝试自动完成包括</p>\n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: circle; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">构建镜像</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">（重新）创建服务</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">启动服务</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">关联服务相关容器的一系列操作</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">现在我们的项目应该启动了，依然是：<a href=\"http://localhost:4000/\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">http://localhost:4000/</a>，我们会看到：\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716048920239-8d040850-e392-4391-893d-b3ed8bceb1b0-20240519110530859.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n<strong style=\"color: rgb(145, 109, 213); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">之前我们做的事情，现在只需要一行命令就都帮我们搞定了</strong>\n真好，加入每次部署使用 Docker Compose 节省时间是 1 分钟（应该肯定不止吧！)，那帮所有使用 Docker 的人节省的时间那得是多少呀！这就是技术的魅力，省下来的时间玩游戏多香呀！\n现在还有一个问题，就是 Redis 中的数据都在容器中，如果容器销毁，产生的数据也都随之消失，那如果是线上，这肯定不行的呀，数据才是最重要的，得要把容器的数据同步备份到主机中，即使容器销毁，数据也还在，那就需要数据卷 VOLUME 了，让我们继续往下看</p>\n<h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: block; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.5em; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(34, 34, 34); line-height: 1.8em; letter-spacing: 0em; padding-top: 0px; padding-bottom: 0px; padding-left: 10px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: solid; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 5px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(145, 109, 213); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; box-shadow: none; display: block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">数据卷</span><span class=\"suffix\" style=\"display: none;\"></span></h2>\n<blockquote class=\"multiquote-1\" data-tool=\"mdnice编辑器\" style=\"margin-top: 20px; margin-bottom: 20px; margin-left: 0px; margin-right: 0px; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; border-top-style: none; border-bottom-style: none; border-left-style: solid; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgb(216, 156, 246); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; background-attachment: scroll; background-clip: border-box; background-color: rgb(244, 238, 255); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px; display: block; overflow-x: auto; overflow-y: auto;\"><span style=\"display: none; color: rgb(0, 0, 0); font-size: 16px; line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: normal;\"></span>\n<p style=\"text-indent: 0em; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; color: rgb(0, 0, 0); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px;\">数据卷（Volumes）是 Docker 提供的一种用于在容器和主机之间共享数据的机制。数据卷可以独立于容器的生命周期存在，这意味着即使容器删除了，数据卷中的数据也不会丢失。它的特点：</p>\n<ol style=\"list-style-type: decimal; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"><strong style=\"color: rgb(145, 109, 213); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">持久性</strong>：数据卷的数据会一直保留，直到明确删除，即使容器删除，数据仍然存在。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"><strong style=\"color: rgb(145, 109, 213); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">共享和重用</strong>：数据卷可以在多个容器之间共享和重用。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"><strong style=\"color: rgb(145, 109, 213); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">备份和恢复</strong>：可以轻松地对数据卷进行备份和恢复操作。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"><strong style=\"color: rgb(145, 109, 213); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">高效</strong>：数据卷的性能优于直接在容器内存储数据。</section></li></ol>\n</blockquote>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">上面部署的项目，Redis 的数据是没有存储到主机的，我们验证一下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;查看&nbsp;redis&nbsp;容器的&nbsp;container&nbsp;id</span><br>docker&nbsp;container&nbsp;ls<br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;进入想要进入的容器&nbsp;（这里是进入&nbsp;Redis&nbsp;容器）</span><br>docker&nbsp;<span class=\"hljs-built_in\" style=\"color: #e6c07b; line-height: 26px;\">exec</span>&nbsp;-it&nbsp;6ddf48e06645&nbsp;bash<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">终端效果：\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716049653853-c6f826a7-5ffc-4f0b-9a84-582006bb9de7-20240519110537979.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n我们执行一些 Redis 命令，来删除一条数据</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\">redis-cli<br>keys&nbsp;*<br>hgetAll&nbsp;notes<br>hdel&nbsp;notes&nbsp;1702459182837<br>hgetAll&nbsp;notes<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\"><img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716050025554-0480213f-90f5-4609-8a18-70871786626f-20240519110544770.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n由于 Next.js 编译的缘由，我们需要重启 Next.js 容器查看效果，我们先按 <code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">Ctrl + C</code> 退出 Cli 界面，然后 <code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">Ctrl + D </code>退出交互终端，然后执行：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;查看&nbsp;Next.js&nbsp;项目的&nbsp;container&nbsp;id</span><br>docker&nbsp;container&nbsp;ls<br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;重启&nbsp;Next.js&nbsp;容器</span><br>docker&nbsp;container&nbsp;restart&nbsp;74776b12c032<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">我们能看到：\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716050363059-b5127681-5229-4206-88ee-4ba689070781-20240519110554320.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n这时候，如果我们把所有容器都删除（Redis 容器也删除了），重新运行：\n先执行：<code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker-compose down</code>，再执行<code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker-compose up</code>\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716050467045-87251aad-af12-45f0-bc83-a7f5a93eb4b3-20240519110615999.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n我们会发现数据又恢复到了三条，那我现在希望我删除能够一直生效，就需要使用到 数据卷（volumes)的功能，它会将数据存在主机文件系统的某个区域，现在我们在项目的根目录下建立一个名为 redis 的文件夹，修改 docker-compose.yml如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\">version:&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'3.8'</span><br>services:<br><br>&nbsp;&nbsp;redis:<br>&nbsp;&nbsp;&nbsp;&nbsp;image:&nbsp;redis<br>&nbsp;&nbsp;&nbsp;&nbsp;ports:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'6379:6379'</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\" style=\"color: #e6c07b; line-height: 26px;\">command</span>:&nbsp;redis-server<br>&nbsp;&nbsp;&nbsp;&nbsp;volumes:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./redis:/data<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;nextapp:<br>&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;.<br>&nbsp;&nbsp;&nbsp;&nbsp;ports:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'4000:3000'</span><br>&nbsp;&nbsp;&nbsp;&nbsp;depends_on:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;redis<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">./redis:/data 是通过 : 进行分割，左边是主机的地址，右边是 容器的地址，我们会发现很多地方都是这样，左边是宿主机的信息，右边是容器的。\n我们配置这个后，容器中的数据就会同步到主机，也就实现了<strong style=\"color: rgb(145, 109, 213); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">数据持久化</strong>。\n我们删除掉之前的镜像，再重新构建的镜像，因为数据做了持久化，再重复一遍刚才的操作再次打开地址的时候，数据如果是两条，那么数据卷就生效，我们动手试一下吧！</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;查看镜像</span><br>docker&nbsp;image&nbsp;ls&nbsp;<br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;删除镜像</span><br>docker&nbsp;rmi&nbsp;next-react-demo-nextapp<br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;再次查看</span><br>docker&nbsp;image&nbsp;ls&nbsp;<br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;重新执行&nbsp;docker&nbsp;compose</span><br>docker-compose&nbsp;up<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\"><img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716051332151-3b15f4fd-b567-4b94-a438-313f651e0ae3-20240519110624339.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n去删数据：\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716051547104-8e9268fd-4997-48e2-8ade-a121ead5c943-20240519110631909.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n重新启动 nextapp 容器，然后刷新 <a href=\"http://localhost:4000/\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">http://localhost:4000/</a>\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716051656834-1f6581ea-fea1-4a8d-b0c3-c19050e1a8ec-20240519110638329.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n我们删除关闭所有容器，然后重启。会看到数据依然是两条。那数据持久化就完成啦！\n如果细心的小伙伴，可以看到我们主机的 Redis 目录下 多了一个 文件\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716051972819-ac8ff33f-917e-4361-ae22-02bc451f7d63-20240519110647091.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\">\n这个文件是二进制文件，正是 Redis 数据的全量备份。运行 <code style=\"color: rgb(145, 109, 213); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker-compose up</code> 的时候，redis 又会读取加载这个文件，也就实现了数据持久化。\ndump.rdb 这个文件就是 Redis 的持久化机制的体现。Redis 的持久化机制有两种，</p>\n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: circle; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">一种是 RDB（Redis Database），RDB 是一次快照，也是默认值</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">一种是 AOF（Append Only File）。开启 Redis 容器时的 --appendonly 参数开启那就是 AOF。</section></li></ul>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: transparent; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: center; line-height: 1.5em; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; color: rgb(0, 0, 0); border-bottom-color: rgb(216, 156, 246); line-height: 1.5em; letter-spacing: 0em; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: transparent; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">数据卷的其他命令</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: circle; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">创建：<code style=\"background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker volume create my-vol</code></section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">查看：<code style=\"background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker volume ls</code></section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">查看数据卷对应主机位置：<code style=\"background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">docker volume inspect my-vol</code></section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">在 docker-compose.yml 创建数据卷</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-size: 12px;\">version:&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'3.8'</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;创建名为&nbsp;redis-data&nbsp;数据卷</span><br>volumes:<br>&nbsp;&nbsp;redis-data:<br><br>services:<br><br>&nbsp;&nbsp;redis:<br>&nbsp;&nbsp;&nbsp;&nbsp;image:&nbsp;redis<br>&nbsp;&nbsp;&nbsp;&nbsp;ports:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'6379:6379'</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\" style=\"color: #e6c07b; line-height: 26px;\">command</span>:&nbsp;redis-server<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">#&nbsp;挂载&nbsp;到容器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;volumes:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;redis-data:/data<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;nextapp:<br>&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;.<br>&nbsp;&nbsp;&nbsp;&nbsp;ports:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'4000:3000'</span><br>&nbsp;&nbsp;&nbsp;&nbsp;depends_on:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;redis<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">到这里，本节就结束了，但是这次部署，依然有两个问题？</p>\n<ol data-tool=\"mdnice编辑器\" style=\"list-style-type: decimal; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">打包后的 next.js 镜像很大, 我们需要优化</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">目前依然只能本地访问，我们部署是为了让所有人都可以访问，但是没有做到。</section></li></ol>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">下一节，我们深度使用 Docker，解决这两个问题，到这里，我发现 Docker 命令还是很多的，如果不是经常使用，根本就记不住（ps：虽然可以使用 Docker desktop 快捷操作）。如果忘记命令，这里推荐查阅这个中文文档，非常大而全的手册：<a href=\"https://yeasy.gitbook.io/docker_practice\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">https://yeasy.gitbook.io/docker_practice</a>，很快能搜索到想要的代码\n<img src=\"https://cdn.jsdelivr.net/gh/chaseFunny/imageSource/blog/1716086440826-0f2f8d6b-2e57-4125-8480-e04b4a4623c7.png\" alt=\"image.png\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%;\"></p>\n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 15px; line-height: 2.1em; letter-spacing: 0.02em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">一个人可以走得更快，但一群人才能走得更远。加入 【<a href=\"https://public.zsxq.com/groups/51122858222824.html?group_id=51122858222824&amp;secret=218iwimac5qa452q3o6pz2os5ajftbb3&amp;inviter_id=182848221148142&amp;inviter_sid=k4953z9ak4&amp;share_from=ShareToWechat&amp;keyword=Hd51u&amp;type=group\" style=\"color: rgb(145, 109, 213); font-weight: bold; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(30, 107, 184); border-bottom-color: rgb(145, 109, 213); border-left-color: rgb(30, 107, 184); border-right-color: rgb(30, 107, 184); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; text-decoration-line: none; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word;\">编程导航</a>】知识星球和我一起学习进步吧！</p>\n</section>",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1619930914211520514/YuzgVW7V-640.png",
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 12,
        "thumbNum": 3,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1619930914211520514",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "editTime": "2024-05-20 17:04:20",
        "createTime": "2024-05-19 12:08:54",
        "updateTime": "2024-05-21 10:25:29",
        "accessScope": 0,
        "user": {
          "id": "1619930914211520514",
          "planetCode": "1012",
          "userName": "SnailRun",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/aRneVaen8XSWOILibfkW5SHicYZia2oDxA8zKUtnzLRVFbwiclEK8f80QMRk3kviawzL8gTWk4MgA0P0VeF1r0O0upg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "admin",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": "https://github.com/chaseFunny",
          "blog": "https://chasefunny.github.io/",
          "score": 40,
          "scoreLevel": 2,
          "coin": 0,
          "followeeNum": 26,
          "followNum": 3,
          "followStatus": null,
          "vipExpireTime": "2024-04-13 22:37:59",
          "lastLoginTime": null,
          "createTime": "2023-01-30 13:30:01",
          "updateTime": "2024-05-22 17:51:18"
        },
        "tags": [
          "文章",
          "笔记"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      },
      {
        "id": "1791318807807590401",
        "title": "大四实习，Hr 拖转正，是该留下来还是看新机会？",
        "description": null,
        "content": "前两天，看到编程导航里一位鱼友的问题，感觉也是很多同学纠结的点，在这里分享一下。\n\n\n\n鱼友个人情况：\n\n大四下学期，3 月份入职了一家外包公司，作息时间 996，晚上下班还要通勤 1 小时，到家快 23 点了，而后第二天又要早起去上班，工作内容主要是写表单，感觉成长有限。\n\n之前和 Hr 沟通转正事项（马上要毕业了），对方回复暂时还不确定，目前感觉市场环境也不太行，加上实习没什么成长，很迷茫后续的选择。\n\n\n\n我的建议：\n\n很明显是 Hr 想拖着该鱼友，**这样等到他毕业之后再考虑是否给转正，或者以低于市场价的薪资来给，鱼友就会很难受，既不甘于薪资水平，但也担心届时裸辞出去找工作压力很大，可能就会默默忍受**，选择继续干下去，因为没有其他选择权了。\n\n\n\n第一种选择：选择留在公司，也不看新的机会，忙碌于实习工作，等待 Hr 最后宣判结果，不给转正，或者以低于市场价的薪资给你转正。\n\n第二种选择：选择留在公司，开始寻求新的机会，尽快优化简历去投递起来，有面试就去，没有面试就加紧学习和做项目，尽可能拿到其他的 Offer ，方便后续有底气和公司谈判，如果公司不给转正或者薪资不高，你都能选择 Plan B。\n\n第三种选择：如果感觉很累，选择裸辞找工作，毕业之后就得参加社招，短期来看会轻松点，但如果长时间找不到工作，心理压力、经济压力会比较大，可能最终坚持不下去会随便找个其他工作过渡。\n\n\n\n**我建议该同学是先留在公司，抓紧优化简历去投递看机会，后面有底气和公司 Battle，鱼友回复我说\"两者同时做有点累，坚持不下来。\"。**\n\n没有最好的选择，选出适合自己的即可，考虑清楚每种决策的利弊，能接受最差的结果，其实就可以了。不过在编程导航里见到很多类似的案例，在公司一直工作着，最后 Hr 给到不高的薪资，而后鱼友默默忍受，又后悔之前校招没有看其他的机会。\n\n\n\n所以，**是选择短期痛苦累，长期舒服的；还是选择短期轻松，长期难受的。**",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1608440217629360130/K1L88vjY-28628f29d5cc5560da57e6ad4b404288.jpeg",
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 34,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1608440217629360130",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "editTime": "2024-05-20 17:04:20",
        "createTime": "2024-05-17 12:04:19",
        "updateTime": "2024-05-21 11:15:42",
        "accessScope": 0,
        "user": {
          "id": "1608440217629360130",
          "planetCode": "1285",
          "userName": "小y",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhOqyiahbWybPMINia0hJbTDoZbs1ACTb9ldJS99dIE3ckBSjT3z7icVJzXol7BpFoyibESEWqYFagXg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "admin",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 40,
          "scoreLevel": 2,
          "coin": 0,
          "followeeNum": 14,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2286-11-21 01:46:39",
          "lastLoginTime": null,
          "createTime": "2022-12-29 20:30:05",
          "updateTime": "2024-05-21 09:53:07"
        },
        "tags": [
          "文章",
          "求职"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      },
      {
        "id": "1791017964522745858",
        "title": "Spring AI-02：玩转Prompt",
        "description": "关于Spring AI中Prompt的记录",
        "content": "书接上回：https://www.code-nav.cn/post/1790951391959232513\n\n目前已经用 Spring AI 快速搭建了一个基础的 Application。这次就快速了解一下 Spring AI 里的 Prompt，主要针对如何使用框架里的 Prompt 相关的 API 的使用。\n\n> 官方文档：[https://docs.spring.io/spring-ai/reference/api/prompt.html](https://docs.spring.io/spring-ai/reference/api/prompt.html)\n\n<a name=\"a3kKz\"></a>\n\n# 简单了解 Prompt\n\nPrompt 是引导 AI 模型生成特定输出的输入信息。这些提示的设计和措辞极大地影响着模型的响应。说得再简单点，任何我们发给 AI 模型的信息都可以是 Prompt，例如上回我们问 ChatGPT：“_你会不会唱跳 Rap 打篮球？_”。<br />在AI领域中，Prompt 的结构随着时间演进，现在已经发展出了一门专门的学科——提示词工程。\n\n> 学习了解提示词工程可参考**提示工程指南**：[https://www.promptingguide.ai/zh](https://www.promptingguide.ai/zh)\n\n最初的 Prompt 只是简单的字符串。随着时间推移，它们发展到包含特定输入的占位符，如“USER:”，AI模型能够识别这一标识。<br />Spring AI 将来可能也会引入更高层次的抽象来与 AI 模型进行交互，目前提供的基础类`Prompt`是我们调用 AI 模型接口时封装消息的主要工具类，即我们调用模型的`call`方法或是`stream`方法传入的参数类型大多数时候都是 Prompt 对象。<br />例如 `ChatClient`接口的 `call` 方法：\n\n```java\n@FunctionalInterface\npublic interface ChatClient extends ModelClient<Prompt, ChatResponse> {\n\n\tdefault String call(String message) {\n\t\tPrompt prompt = new Prompt(new UserMessage(message));\n\t\tGeneration generation = call(prompt).getResult();\n\t\treturn (generation != null) ? generation.getOutput().getContent() : \"\";\n\t}\n\n\t@Override\n\tChatResponse call(Prompt prompt);\n\n}\n```\n\n例如`StreamingChatClient`接口的`stream`方法：\n\n```java\n@FunctionalInterface\npublic interface StreamingChatClient extends StreamingModelClient<Prompt, ChatResponse> {\n\n\tdefault Flux<String> stream(String message) {\n\t\tPrompt prompt = new Prompt(message);\n\t\treturn stream(prompt).map(response -> (response.getResult() == null || response.getResult().getOutput() == null\n\t\t\t\t|| response.getResult().getOutput().getContent() == null) ? \"\"\n\t\t\t\t\t\t: response.getResult().getOutput().getContent());\n\t}\n\n\t@Override\n\tFlux<ChatResponse> stream(Prompt prompt);\n\n}\n```\n\n而上回的`OpenAiChatClient`类实现了上面的两个接口，重写的`call`方法和`stream`方法传入的参数都是 Prompt 对象。\n\n<a name=\"vR4Sw\"></a>\n\n# API 速览\n\n<a name=\"UlVIG\"></a>\n\n## Prompt\n\nPrompt 类的定义比较简单，总共也就 90 多行，重点看一下它的构造方法：\n\n```java\npublic class Prompt implements ModelRequest<List<Message>> {\n\n\tprivate final List<Message> messages;\n\n\tprivate ChatOptions modelOptions;\n\n\tpublic Prompt(String contents) {\n\t\tthis(new UserMessage(contents));\n\t}\n\n\tpublic Prompt(Message message) {\n\t\tthis(Collections.singletonList(message));\n\t}\n\n\tpublic Prompt(List<Message> messages) {\n\t\tthis.messages = messages;\n\t}\n\n\tpublic Prompt(String contents, ChatOptions modelOptions) {\n\t\tthis(new UserMessage(contents), modelOptions);\n\t}\n\n\tpublic Prompt(Message message, ChatOptions modelOptions) {\n\t\tthis(Collections.singletonList(message), modelOptions);\n\t}\n\n\tpublic Prompt(List<Message> messages, ChatOptions modelOptions) {\n\t\tthis.messages = messages;\n\t\tthis.modelOptions = modelOptions;\n\t}\n}\n\n```\n\n官方的解释说：Prompt 类充当一系列有序 Message 对象的容器，每个对象构成 Prompt 的整体部分。每个 Message 在提示中扮演一个独特角色，其内容和目的各不相同。这些角色可以包括多种元素，从用户查询到 AI 生成的响应或相关的背景信息。这种安排使得与 AI 模型的交互变得复杂而详尽，因为提示由多个消息构建而成，每个消息在对话中被分配了特定的角色。<br />从 Prompt 类的定义中可以比较清楚的看出如何构建一个 Prompt 对象（这好像一句废话），值得注意的是两点：\n\n1. 可以传入一个 Message 对象或 Message 列表构建 Prompt 实例对象；\n2. 可以传入一个 Message 对象或对象列表，加上 ChatOptions 对象来构建 Prompt 实例。\n\n第一点关于 Message 接口的内容先按下不表。对于第二点，官方文档中给出过这样的示例代码：\n\n```java\nvar openAiApi = new OpenAiApi(System.getenv(\"OPENAI_API_KEY\"));\n\nvar chatClient = new OpenAiChatClient(openAiApi)\n    .withDefaultOptions(OpenAiChatOptions.builder()\n            .withModel(\"gpt-35-turbo\")\n            .withTemperature(0.4)\n            .withMaxTokens(200)\n        .build());\n\nChatResponse response = chatClient.call(\n    new Prompt(\"Generate the names of 5 famous pirates.\"));\n\n// Or with streaming responses\nFlux<ChatResponse> response = chatClient.stream(\n    new Prompt(\"Generate the names of 5 famous pirates.\"));\n```\n\n上回提到的需求：\n\n> 我们开发了一个 AI 应用提供给用户，需要用户配置自己的 API key、自己选择模型、参数等配置选项\n\n似乎也就可以通过 Prompt 来一步到位了。下面用一个简单的示例来验证：\n\n```java\n    /**\n     * 构建 Prompt 实例时附带 ChatOption 的调用方法\n     *\n     * @param api 设置 OpenAI 的 API key 的对象\n     * @param prompt 构建了附带 ChatOption 的 Prompt 对象\n     */\n    public Map<String, String> singleCompletionByPromptWithOption (OpenAiApi api, Prompt prompt) {\n\n        OpenAiChatClient openAiChatClient = new OpenAiChatClient(api);\n\n        String response = openAiChatClient.call(prompt).getResult().getOutput().getContent();\n\n        return Map.of(\n                \"Response\", response\n        );\n    }\n```\n\n然后修改一下 Controller 里的`manualConfigDemo`方法：\n\n```java\n    @GetMapping(\"/gpt/manual\")\n    public Map<String, String> manualConfigDemo (@RequestParam String api,\n                                                 @RequestParam(defaultValue = \"gpt-4\") String chatModel,\n                                                 @RequestParam(defaultValue = \"1.0\") String temperature,\n                                                 @RequestParam(defaultValue = \"10\") String maxTokens,\n                                                 @RequestParam(defaultValue = \"你会不会唱跳Rap打篮球？\") String message) {\n        OpenAiApi openAiApi = new OpenAiApi(api);\n        Float temp = Float.parseFloat(temperature);\n        Integer maxToken = Integer.parseInt(maxTokens);\n\n        ChatOptionsBean optionsBean = new ChatOptionsBean(chatModel, temp, maxToken);\n\n        OpenAiChatOptions chatOptions = completionService.createChatOptions(optionsBean);\n\n        Prompt prompt = new Prompt(new UserMessage(message), chatOptions);\n\n        return completionService.singleCompletionByPromptWithOption(openAiApi, prompt);\n\n    }\n```\n\n看到响应：\n\n```java\n{\n  \"Response\": \"作为一个人工智能虚\"\n}\n```\n\n发现手动配置的参数确实起作用了（最明显： maxToken=10），能够正常调用。\n\n<a name=\"I3wpe\"></a>\n\n## Message\n\n前面提到，构建 Prompt 实例对象很多时候需要的还是 Message 接口。先简单看一下接口的定义：\n\n```java\npublic interface Message {\n\n\tString getContent();\n\n\tList<Media> getMedia();\n\n\tMap<String, Object> getProperties();\n\n\tMessageType getMessageType();\n\n}\n```\n\n然后是 Message 接口的主要实现类，其实实现 Message 接口的类目前只有`AbstractMessage`抽象类，而其他的五个类：`SystemMessage`、`AssistantMessage`、`UserMessage`、`ChatMessage`、`FunctionMessage`都是`AbstractMessage`抽象类的子类。<br />![image.png](https://cdn.nlark.com/yuque/0/2024/png/39061585/1715841766135-5b1cd7ea-6130-46a2-a043-cb4cde05347d.png#averageHue=%23818577&clientId=ua0ab855c-0db4-4&from=paste&height=162&id=u8e0b8ace&originHeight=202&originWidth=1199&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=58768&status=done&style=none&taskId=uc1f5d68c-194d-4779-b885-ac0d98c6d4d&title=&width=959.2)\n\n从`Message`实现类的子类的名字不难看出，他们最主要的功能就是为发送给 AI 模型的消息赋予相应的角色。官方文档的说明如下：\n\n> OpenAI 引入了一种更为组织化的 Prompt 方法。在他们的模型中，Prompt 不仅仅是一串单一的字符串，而是一系列的消息。每条消息虽然仍以文本形式存在，但都被赋予了一个**特定的角色**。这些角色对消息进行了分类，为 AI 模型**明确了 Prompt 每个部分的上下文和目的**。这种结构化的方法增强了与AI交流的细微性和有效性，因为 Prompt 的每一部分都在互动中扮演着独特且明确的角色。\n\n主要的角色包括：\n\n- **System**：引导AI的行为和响应方式，为AI如何解释和回复输入设定参数或规则。这类似于在开始对话前向AI提供指示。\n- **User**：代表用户的输入——他们对AI的问题、命令或陈述。这一角色是基础性的，因为它构成了AI响应的基础。\n- **Assistant**：AI对用户输入的响应。它不仅仅是答案或反应，对于维持对话的流畅性至关重要。通过跟踪AI之前的响应（其“助手角色”消息），系统确保了连贯且上下文相关的互动。\n- **Function**：这一角色涉及对话过程中的特定任务或操作。当系统角色设定了AI的整体行为时，功能角色专注于执行用户请求的某些动作或命令。它就像AI中的一项特殊功能，在需要执行特定功能（如计算、获取数据或其他超出简单对话的任务）时使用。这一角色使AI除了提供对话响应外，还能提供实际帮助。\n  <a name=\"LjXN5\"></a>\n\n# PromptTemplate\n\n<a name=\"J9MBQ\"></a>\n\n## 速览\n\n前面的很，整点高级的\uD83D\uDE01，好叭其实也没有很高级\uD83D\uDE02\n\n`PromptTemplate` 可以类比到`JDBCTemplate`，是一个用于提示模板的关键组件，具有`Assistant`、`System`、`Function`三种角色对应的子类。以下是类的声明：\n\n```java\npublic class PromptTemplate implements PromptTemplateActions, PromptTemplateMessageActions {\n    ......\n}\n\n```\n\n解释一下它实现的两个接口的主要作用：\n\n- `PromptTemplateMessageActions`：专门针对通过生成和操作 Message 对象来创建提示。\n- `PromptTemplateActions`：设计用于返回 Prompt 对象，该对象可以传递给 ChatClient 生成响应。\n\n<a name=\"F3JSy\"></a>\n\n## 好，那么好，咋用？\n\n使用 PromptTemplate 最终的目的在于构建 Prompt 实例对象，这通过调用`create`方法来实现。根据官方的描述，用法主要有三种：通过在 raw String 中用`{}`设置占位符、通过 Resource，最终都经过 Map。<br />方式一示例：\n\n```java\nString userText = \"\"\"\n    你是{name}的真爱粉，现在请你来一段{action}。\n\"\"\";\n\n// 假设已经通过参数传入了 name 和 action 这两个变量，\n// name = \"坤坤\"，action = \"唱跳Rap打篮球\"\nPromptTemplate promptTemplate = new PromptTemplate(userText);\nPrompt prompt = promptTemplate.create(Map.of(\n    \"name\", name,\n    \"action\", action\n));\n\n```\n\n方式二示例：<br />首先在 Resource 目录下定义好 Prompt 文本文件，使用`.st`格式的结构化文本。这里就不唱跳 Rap 打篮球了，用鱼皮的星球项目—智能 BI 系统的 Prompt 来改造：\n\n> 不了解的兄弟们戳：\n>\n> - 加入星球：[https://t.zsxq.com/EFgJ7](https://t.zsxq.com/EFgJ7)\n> - 项目教程：[https://wx.zsxq.com/dweb2/index/columns/51122858222824](https://wx.zsxq.com/dweb2/index/columns/51122858222824)\n\n\n```markdown\n```Special Attention\n只生成指定格式的js代码，不要生成其他任何多余的开头、结尾、注释等内容\n\\```\n\n```Task\n你是一个数据分析师和前端开发专家，接下来我会提供给你csv格式的原始数据，请对数据进行分析后，\n生成前端 Echarts V5 的 option 配置对象js代码，合理地将数据进行可视化，\n不要生成任何多余的内容，比如注释！！！\n\\```\n\n```CSV Data\n{data}\n\\```\n\n```\n用三个撇号包括的原因在于，实践中我发现这样可以很大程度上保证 AI 模型返回内容的稳定性，即输出一般也都是三个撇号包裹的，我们后续处理会方便很多。而且分不同的片段，让 AI 能够充分理解每一个部分。\n\n接下来就是在 Java 代码中加载这个 Resource：\n```java\n@Value(\"classpath:/prompts/analysis-data.st\")\nprivate Resource analysisDataPrompt;\n\n...\n\nvar template = new PromptTemplate(analysisDataPrompt);\nvar prompt = template.create(Map.of(\n    \"data\", csvData\t// 假设已经处理得到了一个csvData\n));\n\n```\n\n\n<a name=\"f2IKs\"></a>\n\n# 小结\n\n本文介绍了在 Spring AI 框架中使用 Prompt 的基本概念和实践方法，着重探讨了如何利用 Prompt 相关API与AI模型进行交互，构建高效且富有目的性的对话。\n\n1. 简单了解Prompt\n   - Prompt：引导AI模型产生特定输出的输入信息，其设计直接影响模型响应。任何发给AI的信息均可视为Prompt。\n   - Prompt的发展：从简单的字符串演变为包含特定输入占位符的结构，AI能识别并据此作出相应反馈。现在，Prompt工程已成为一门专门学科。\n2. API速览\n   - Prompt类：作为与AI模型交互的主要工具类，封装了用户发送给模型的消息。构造函数支持多种方式创建Prompt对象，包括基于字符串、单个Message对象、Message列表，以及结合ChatOptions对象以提供更多模型交互选项。\n   - Message接口：定义了消息的基本结构，包括内容、媒体、属性和消息类型。子类如UserMessage、AssistantMessage等，分别代表用户输入、AI响应等不同角色，增强了交互的上下文理解。\n3. PromptTemplate的运用\n   - PromptTemplate类：类似JDBCTemplate，用于创建和管理Prompt模板，通过动态占位符、资源文件或Map数据填充内容，便于生成多样化的Prompt实例。\n   - 创建Prompt实例：示例代码展示了如何使用PromptTemplate结合Map参数，动态替换模板中的占位符，以适应具体场景需求，如通过用户定义的name和action生成特定对话内容。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1675780045722882049/E7b6Jcnu-20230308044235.png",
        "language": null,
        "externalLink": null,
        "shortLink": null,
        "componentName": null,
        "viewNum": 38,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1675780045722882049",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "editTime": "2024-05-20 17:04:20",
        "createTime": "2024-05-16 16:08:52",
        "updateTime": "2024-05-22 17:17:49",
        "accessScope": 0,
        "user": {
          "id": "1675780045722882049",
          "planetCode": "20520",
          "userName": "kiwiSean",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1675780045722882049/0qV0fm9H-shark.jpg",
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "北京",
          "birthday": "2000-05-11",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/LiangshouX/",
          "blog": "https://blog.csdn.net/qq_59109986?type=blog",
          "score": 0,
          "scoreLevel": 1,
          "coin": 0,
          "followeeNum": 1,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2025-04-23 10:07:39",
          "lastLoginTime": null,
          "createTime": "2023-07-03 16:14:32",
          "updateTime": "2024-05-21 00:25:29"
        },
        "tags": [
          "文章",
          "Java",
          "Spring",
          "人工智能"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null,
        "status": null,
        "relatedLink": null,
        "acceptAnswerId": null
      }
    ],
    "total": "4266",
    "size": "8",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "534"
  },
  "message": "ok"
}